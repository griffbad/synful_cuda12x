[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "synful-pytorch"
version = "2.0.0"
description = "Modern PyTorch implementation of Synful: Synaptic Partner Detection in 3D Electron Microscopy"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Julia Buhmann", email = "buhmannj@janelia.hhmi.org"},
    {name = "Jan Funke", email = "funkej@janelia.hhmi.org"},
    {name = "Modernization Team"}
]
keywords = ["neuroscience", "electron-microscopy", "deep-learning", "pytorch", "synapses"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]
requires-python = ">=3.10"
dependencies = [
    "torch>=2.1.0",
    "torchvision>=0.16.0",
    "lightning>=2.1.0",
    "torchmetrics>=1.2.0",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    "scikit-image>=0.22.0",
    "pandas>=2.0.0",
    "zarr>=2.16.0",
    "h5py>=3.9.0",
    "pymongo>=4.5.0",
    "neuroglancer>=2.38.0",
    "cloud-volume>=8.0.0",
    "gunpowder>=1.3.0",
    "daisy>=1.2.2",
    "einops>=0.7.0",
    "hydra-core>=1.3.0",
    "wandb>=0.16.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]
vis = [
    "plotly>=5.17.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "napari>=0.4.18",
    "jupyter>=1.0.0",
    "ipywidgets>=8.1.0",
    "rich>=13.0.0",
    "scikit-image>=0.22.0",
]
medical = [
    "monai>=1.3.0",
    "nibabel>=5.1.0",
    "dipy>=1.7.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/synful-pytorch"
Repository = "https://github.com/yourusername/synful-pytorch"
Documentation = "https://synful-pytorch.readthedocs.io"
"Bug Tracker" = "https://github.com/yourusername/synful-pytorch/issues"

[project.scripts]
synful-train = "synful.cli:train"
synful-predict = "synful.cli:predict"
synful-evaluate = "synful.cli:evaluate"
synful-visualize = "synful.cli:visualize"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["synful"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=synful",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src/synful"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]